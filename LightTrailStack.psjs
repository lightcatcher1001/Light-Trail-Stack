const app = require("photoshop").app;
const psAction = require("photoshop").action;
const fileSystem = require("uxp").storage.localFileSystem;

// *******************************************************
// Helper classes
// *******************************************************
class ScriptInputDialogViewModel
{
    dialogResultPromise;
    inputFolderDisplayElement;
    outputFolderDisplayElement;
    maskFileDisplayElement;

    get sourceFolder() { return this._sourceFolder; }
    get outputFolder() { return this._outputFolder; }
    get maskFile() { return this._maskFile; }
    get isDialogResultOK() { return this._isDialogResultOK === true; }

    async selectInputFolderButtonClicked()
    {
        const folderEntry = await fileSystem.getFolder();
        if (folderEntry) {
            this.inputFolderDisplayElement.innerHTML = `<b>Source Folder:</b> ${folderEntry.nativePath}`;
            this._sourceFolder = folderEntry;
        }        
    }

    async selectOutputFolderButtonClicked()
    {
        const folderEntry = await fileSystem.getFolder();
        if (folderEntry) {
            this.outputFolderDisplayElement.innerHTML = `<b>Output Folder:</b> ${folderEntry.nativePath}`;
            this._outputFolder = folderEntry;
        }
    }

    async selectMaskFileButtonClicked()
    {
        const fileEntry = await fileSystem.getFileForOpening();
        if (fileEntry) {
            this.maskFileDisplayElement.innerHTML = `<b>Mask File:</b> ${fileEntry.nativePath}`;
            this._maskFile = fileEntry;
        }
    }

    okButtonClicked()
    {
        this._isDialogResultOK = true;
    }

    cancellButtonClicked()
    {
        this._isDialogResultOK = false;
    }
}

// *******************************************************
// Helper functions
// *******************************************************
async function blendImage(targetDoc, sourceDoc, maskDoc)
{
    let command;
    let retVal;

    app.activeDocument = sourceDoc;

    // select all of sourceDoc
    command = {"_obj":"set","_target":[{"_property":"selection","_ref":"channel"}],"to":{"_enum":"ordinal","_value":"allEnum"}};
    retVal = await psAction.batchPlay([command], {});

    // copy to clipboard
    command = {"_obj":"copyEvent","copyHint":"pixels"};
    retVal = await psAction.batchPlay([command], {});
    
    app.activeDocument = targetDoc;
    if (maskDoc !== undefined)
    {
        await applyMaskToActiveDocument(maskDoc);
    }    

    // paste sourceDoc from clipboard as a new layer
    command = {"_obj":"paste","antiAlias":{"_enum":"antiAliasType","_value":"antiAliasNone"},"as":{"_class":"pixel"}};
    retVal = await psAction.batchPlay([command], {});
    
    // set current layer blending mode to 'lighten'
    command = {"_obj":"set","_target":[{"_enum":"ordinal","_ref":"layer","_value":"targetEnum"}],"to":{"_obj":"layer","mode":{"_enum":"blendMode","_value":"lighten"}}};
    retVal = await psAction.batchPlay([command], {});
    
    command = {"_obj":"flattenImage"};
    retVal = await psAction.batchPlay([command], {});
}

async function applyMaskToActiveDocument(maskDoc)
{
    let command;
    let result;

    command = {
        "_obj": "set",
        "_target": [{"_property":"selection","_ref":"channel"}],
        "to": {
            "_ref": [
                {"_enum":"ordinal", "_ref":"channel", "_value":"targetEnum"},
                {"_name":maskDoc.name, "_ref":"document"}
            ]
        }
    };
    result = await psAction.batchPlay([command], {});
    
    command = {"_obj":"make","at":{"_enum":"channel","_ref":"channel","_value":"mask"},"new":{"_class":"channel"},"using":{"_enum":"userMaskEnabled","_value":"revealSelection"}};
    result = await psAction.batchPlay([command], {});    
}

function getFileExtension(fileName)
{
    const lastIndex = fileName.lastIndexOf(".");
    const fileExtension = fileName.substring(lastIndex + 1);
    return fileExtension;    
}

async function saveIntermediateStepFile(resultDoc, stepIndex, stepFileName, outputFolder)
{
    const stepFileNameExtension = getFileExtension(stepFileName);
    const outputFileNameExtension = stepFileNameExtension === "jpg" || 
                                    stepFileNameExtension === "jpeg" ? "" : ".jpg"; // append .jpg extension if current format is not jpg
    const outputFileName = `LTS${String(stepIndex).padStart(6, 0)}_${stepFileName}${outputFileNameExtension}`;
    const outputFile = await outputFolder.createFile(outputFileName);
    resultDoc.saveAs.jpg(outputFile, { quality: 12 }, true);   
}

function createScriptInputDialog(dialogVM) 
{
    const dialog = document.createElement("dialog");
    dialog.style.color = "white";
    const div = document.createElement("div");
    div.style.position = "relative"
    div.style.display = "block";
    div.style.height = "275px";
    div.style.width = "550px";

    let btnTemp;
    btnTemp = createAndAddButton(div, "Select Source Image Folder", 
        async () => await dialogVM.selectInputFolderButtonClicked());
    btnTemp.style.minWidth = 210;
    dialogVM.inputFolderDisplayElement = document.createElement("p");
    dialogVM.inputFolderDisplayElement.style.marginLeft = "15px";
    div.appendChild(dialogVM.inputFolderDisplayElement);       
    
    btnTemp = createAndAddButton(div, "Select Output Folder (optional)",
        async () => await dialogVM.selectOutputFolderButtonClicked());
    btnTemp.style.minWidth = 210;
    dialogVM.outputFolderDisplayElement = document.createElement("p");
    dialogVM.outputFolderDisplayElement.style.marginLeft = "15px";
    div.appendChild(dialogVM.outputFolderDisplayElement);

    btnTemp = createAndAddButton(div, "Select Mask File (optional)",
        async () => await dialogVM.selectMaskFileButtonClicked());
    btnTemp.style.minWidth = 210;
    dialogVM.maskFileDisplayElement = document.createElement("p");
    dialogVM.maskFileDisplayElement.style.marginLeft = "15px";
    div.appendChild(dialogVM.maskFileDisplayElement);    

    const dialogOKBtn = createAndAddButton(div, "Ok", () => dialogVM.okButtonClicked());
    dialogOKBtn.style.position = "absolute";
    dialogOKBtn.style.bottom = 0;

    btnTemp = createAndAddButton(div, "Cancel", () => dialog.close());
    btnTemp.style.position = "absolute";
    btnTemp.style.bottom = 0;
    btnTemp.style.left = 72;

    dialogVM.dialogResultPromise = new Promise((resolve, reject) => {
        try {
            dialogOKBtn.addEventListener("click", () => {
                dialog.close();
                resolve(dialogVM);
            })

            dialog.addEventListener("cancel", () => {
                resolve(dialogVM);
            });

            dialog.addEventListener("close", () => {
                resolve(dialogVM);
            });
        } catch (e) {
            console.log(e);
            reject(e);
        }
    })

    dialog.appendChild(div);
    return dialog;

    // local helper functions
    function createAndAddButton(container, buttonText, buttonClickHandler, id)
    {
        const btn = document.createElement("button");
        btn.textContent = buttonText;
        if (buttonClickHandler !== undefined) { btn.onclick = buttonClickHandler; }
        if (id !== undefined) { btn.id = id; }

        container.appendChild(btn);
        return btn;
    }
}

async function showScriptInputDialog()
{
    const dialogVM = new ScriptInputDialogViewModel();
    let dialog = createScriptInputDialog(dialogVM);
    document.body.appendChild(dialog).showModal({"title": "Light Trail Stack"});

    return dialogVM.dialogResultPromise;
}

async function getImageFilesInFolder(imageFolder)
{
    const imageExtensions = ["jpg", "jpeg", "tif", "tiff", "png", "bmp", "gif"];
    const itemsInFolder = await imageFolder.getEntries();
    const imageFiles = itemsInFolder.filter(item => {
        if (!item.isFile) { return false; }
        const lastIndex = item.name.lastIndexOf(".");
        const fileExtension = item.name.substring(lastIndex + 1);
        return imageExtensions.includes(fileExtension);
    });
    
    imageFiles.sort((a, b) => a.name.localeCompare(b.name));
    return imageFiles;
}

// *******************************************************
// Main Script Function
// *******************************************************
async function main()
{
    const scriptInputData = await showScriptInputDialog();
    if (!scriptInputData.isDialogResultOK) { return; }
    
    const sourceFolder = scriptInputData.sourceFolder;
    if (!sourceFolder)
    {
        await app.showAlert("Source image folder is not set. Aborting");
        return;
    }

    const sourceImageFiles = await getImageFilesInFolder(sourceFolder);
    if (sourceImageFiles.length < 2)
    {
        await app.showAlert("Less than 2 images found in source image folder. Aborting");
        return;
    }
    
    const intermediateStepOutputFolder = scriptInputData.outputFolder;
    if (intermediateStepOutputFolder)
    {
        const imageFilesInOutputFolder = await getImageFilesInFolder(intermediateStepOutputFolder);
        if (imageFilesInOutputFolder.length > 0)
        {
            app.showAlert("Existing images found in output folder. Aborting")
            return;
        }
    }

    const maskFile = scriptInputData.maskFile;
    
    let maskDoc
    if (maskFile !== undefined)
    {
        maskDoc = await app.open(maskFile);
    }
    
    let resultDoc;
    let currentDoc;
    for (let i=0; i<sourceImageFiles.length; ++i)
    {
        currentDoc = await app.open(sourceImageFiles[i]);    
        if (i==0)
        {
            resultDoc = await currentDoc.duplicate("LightTrailStack"); 
        }
        else
        {
            await blendImage(resultDoc, currentDoc, maskDoc);
        }
        
        if (intermediateStepOutputFolder !== undefined)
        {
            saveIntermediateStepFile(resultDoc, i, currentDoc.name, intermediateStepOutputFolder);
        }
        await currentDoc.close();
    }
    
    if (maskDoc !== undefined) { await maskDoc.close(); }
    await app.showAlert("Light trail stacking completed.")
}

// run script
await main();
